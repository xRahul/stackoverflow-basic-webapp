{"version":3,"sources":["components/SearchTagComponent.js","actions/search.js","containers/SearchTag.js","components/QuestionListElement.js","components/Loader.js","components/QuestionList.js","containers/Questions.js","components/FilterTagComponent.js","actions/filter.js","containers/FilterTag.js","App.js","store/reducers/index.js","store/reducers/questions.js","serviceWorker.js","index.js","store/store.js"],"names":["SearchTagComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchInput","_handleKeyDown","bind","assertThisInitialized","_handleChange","e","key","preventDefault","fetchQuestions","target","value","react_default","a","createElement","Form","Group","controlId","Label","Control","type","placeholder","onKeyDown","onChange","Text","className","undefined","availableQuota","totalQuota","React","Component","GET_QUESTIONS_BY_TAG","RECEIVE_QUESTIONS_BY_TAG","ERROR_RECEIVING_QUESTIONS_BY_TAG","fetchQuestionsByTag","tag","dispatch","getQuestionsByTag","fetch","concat","then","response","json","questions","receivedAt","Date","now","receiveQuestionsByTag","catch","errorReceivingQuestionsByTag","SearchTag","connect","state","questionsByTag","hasOwnProperty","questionsByTags","currentTag","quota_remaining","quota_max","tagName","QuestionListElement","markUp","__html","Card","Body","Title","dangerouslySetInnerHTML","createMarkup","title","body","substring","href","link","style","textDecoration","Loader","LoadingOverlay_default","active","spinner","PacmanLoader_default","color","QuestionList","listItems","filter","question","filterBy","indexOf","map","QuestionListElement_QuestionListElement","question_id","Fragment","length","isLoading","Loader_Loader","marginTop","Questions","isFetching","items","FilterTagComponent","filterQuestions","showFilterTag","FILTER_QUESTIONS_BY_STRING","FilterTag","searchString","filterQuestionsByString","App","Container","marginBottom","containers_SearchTag","containers_FilterTag","containers_Questions","rootReducer","combineReducers","arguments","hasError","errorMessage","assign","action","defineProperty","Boolean","window","location","hostname","match","store","preloadedState","middlewares","thunkMiddleware","enhancers","applyMiddleware","apply","composedEnhancers","composeWithDevTools","createStore","configureStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2bbd684b.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Form } from 'react-bootstrap'\n\n\nexport default class SearchTagComponent extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.searchInput = \"\"\n    this._handleKeyDown = this._handleKeyDown.bind(this)\n    this._handleChange = this._handleChange.bind(this)\n  }\n\n  _handleKeyDown(e) {\n    if (e.key === 'Enter') {\n      e.preventDefault()\n      if (this.searchInput) this.props.fetchQuestions(this.searchInput)\n    }\n  }\n\n  _handleChange(e) {\n    this.searchInput = e.target.value;\n  }\n\n  render() {\n      return (\n        <Form>\n          <Form.Group controlId=\"formSearchTagControlId\">\n            <Form.Label>Search Trending problems by tag:</Form.Label>\n            <Form.Control type=\"text\" placeholder=\"Tag name\"\n              onKeyDown={this._handleKeyDown}\n              onChange={this._handleChange}\n            />\n            <Form.Text className=\"text-muted\">\n              {this.props.availableQuota !== undefined &&\n                \"Free Search Quota used: \"+ this.props.availableQuota +  \"/\" + this.props.totalQuota\n              }\n            </Form.Text>\n          </Form.Group>\n        </Form>\n      );\n  }\n}\n\nSearchTagComponent.propTypes = {\n  fetchQuestions: PropTypes.func,\n  availableQuota: PropTypes.number,\n  totalQuota: PropTypes.number\n};","import fetch from 'cross-fetch'\n\nexport const GET_QUESTIONS_BY_TAG = 'GET_QUESTIONS_BY_TAG'\nfunction getQuestionsByTag(tag) {\n  return {\n    type: GET_QUESTIONS_BY_TAG,\n    tag\n  }\n}\n\nexport const RECEIVE_QUESTIONS_BY_TAG = 'RECEIVE_QUESTIONS_BY_TAG'\nfunction receiveQuestionsByTag(tag, json) {\n  return {\n    type: RECEIVE_QUESTIONS_BY_TAG,\n    tag,\n    questions: json,\n    receivedAt: Date.now()\n  }\n}\n\nexport const ERROR_RECEIVING_QUESTIONS_BY_TAG = 'ERROR_RECEIVING_QUESTIONS_BY_TAG'\nexport function errorReceivingQuestionsByTag(tag) {\n  return {\n    type: ERROR_RECEIVING_QUESTIONS_BY_TAG,\n    tag\n  }\n}\n\nexport const fetchQuestionsByTag = function (tag) {\n  return dispatch => {\n    dispatch(getQuestionsByTag(tag))\n    return fetch(`https://api.stackexchange.com/2.2/tags/${tag}/faq?site=stackoverflow&filter=!9Z(-wwYGT`)\n      .then(response => response.json())\n      .then(json => {\n        dispatch(receiveQuestionsByTag(tag, json))\n      })\n      .catch(() => dispatch(errorReceivingQuestionsByTag(tag)))\n  }\n}","import {\n  connect\n} from 'react-redux'\nimport SearchTagComponent from '../components/SearchTagComponent';\nimport {\n  fetchQuestionsByTag\n} from '../actions/search'\n\nconst mapStateToProps = (state) => {\n  var availableQuota, totalQuota\n  if (state.questionsByTag.hasOwnProperty('questionsByTags') &&\n    state.questionsByTag.questionsByTags.hasOwnProperty(state.questionsByTag.currentTag)) {\n    availableQuota = state.questionsByTag.questionsByTags[state.questionsByTag.currentTag].quota_remaining\n    totalQuota = state.questionsByTag.questionsByTags[state.questionsByTag.currentTag].quota_max\n  }\n\n  return {\n    availableQuota,\n    totalQuota\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchQuestions: (tagName) => {\n      dispatch(fetchQuestionsByTag(tagName))\n    }\n  }\n}\n\n\nconst SearchTag = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SearchTagComponent)\n\nexport default SearchTag","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { Card } from 'react-bootstrap'\n\n\nexport default class QuestionListElement extends React.Component {\n\n  createMarkup(markUp) {\n    return {__html: markUp};\n  }\n\n  render() {\n      return (\n        <Card>\n          <Card.Body>\n            <Card.Title\n              dangerouslySetInnerHTML={this.createMarkup(this.props.title)} />\n            <Card.Text\n              dangerouslySetInnerHTML={this.createMarkup(this.props.body.substring(0, 200).concat('...'))} />\n            <Card.Text >\n              <a href={this.props.link} target={'blank'} style={{ textDecoration: 'none' }}>\n                StackOverflow\n              </a>\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      );\n  }\n}\n\nQuestionListElement.propTypes = {\n  link: PropTypes.string,\n  title: PropTypes.string,\n  body: PropTypes.string\n};","import React from 'react'\nimport LoadingOverlay from 'react-loading-overlay'\nimport PacmanLoader from 'react-spinners/PacmanLoader'\n\nexport default class Loader extends React.Component {\n\n  render() {\n    return (\n      <LoadingOverlay\n        active={true}\n        spinner={<PacmanLoader color={'#36D7B7'} />}\n      />\n    )\n  }\n}","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { Form } from 'react-bootstrap'\nimport QuestionListElement from './QuestionListElement'\nimport Loader from './Loader';\n\n\nexport default class QuestionList extends React.Component {\n\n  render() {\n    const questions = this.props.questions;\n    const listItems = questions ? questions.filter((question) => {\n      if (!this.props.filterBy) return true\n      return question.title.indexOf(this.props.filterBy) !== -1\n        || question.body.indexOf(this.props.filterBy) !== -1\n    }).map((question) =>\n      <QuestionListElement\n      key={question.question_id}\n      link={question.link}\n      title={question.title}\n      body={question.body}\n      />\n    ) : []\n    return (\n      <>\n      {questions && questions.length !== 0 && listItems.length === 0 &&\n        <Form.Text className=\"text-muted\">No matching questions found!</Form.Text>\n      }\n      {questions && questions.length !== 0 && listItems.length > 0 &&\n        <Form.Text className=\"text-muted\">Found: {listItems.length} matches</Form.Text>\n      }\n      {this.props.isLoading && <Loader/>}\n      {!this.props.isLoading && <ul style={{marginTop: 20}}>{listItems}</ul>}\n      </>\n    );\n  }\n}\n\nQuestionList.propTypes = {\n  isLoading: PropTypes.bool,\n  questions: PropTypes.array,\n  filterBy: PropTypes.string\n};","import {\n  connect\n} from 'react-redux'\nimport QuestionList from '../components/QuestionList';\n\nconst mapStateToProps = (state) => {\n  const isLoading = state.questionsByTag.isFetching\n  var questions, filterBy\n  if (state.questionsByTag.hasOwnProperty('questionsByTags') &&\n    state.questionsByTag.questionsByTags.hasOwnProperty(state.questionsByTag.currentTag)) {\n    questions = state.questionsByTag.questionsByTags[state.questionsByTag.currentTag].items\n    filterBy = state.questionsByTag.filterBy\n  }\n\n  return {\n    isLoading,\n    questions,\n    filterBy\n  }\n}\n\nconst mapDispatchToProps = () => {\n  return {\n    //\n  }\n}\n\n\nconst Questions = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(QuestionList)\n\nexport default Questions","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { Form } from 'react-bootstrap'\n\n\nexport default class FilterTagComponent extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this._handleChange = this._handleChange.bind(this)\n  }\n\n  _handleChange(e) {\n    this.props.filterQuestions(e.target.value);\n  }\n\n  render() {\n      return (\n        <>\n        { this.props.showFilterTag &&\n          <Form>\n            <Form.Group controlId=\"formFilterTagControlId\">\n              <Form.Label>Filter Questions:</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Search string\"\n                onChange={this._handleChange}\n              />\n            </Form.Group>\n          </Form>\n        }\n        </>\n      );\n  }\n}\n\nFilterTagComponent.propTypes = {\n  filterQuestions: PropTypes.func,\n  showFilterTag: PropTypes.bool\n};","export const FILTER_QUESTIONS_BY_STRING = 'FILTER_QUESTIONS_BY_STRING'\nexport function filterQuestionsByString(searchString) {\n  return {\n    type: FILTER_QUESTIONS_BY_STRING,\n    searchString\n  }\n}","import {\n  connect\n} from 'react-redux'\nimport FilterTagComponent from '../components/FilterTagComponent';\nimport {\n  filterQuestionsByString\n} from '../actions'\n\nconst mapStateToProps = (state) => {\n  var showFilterTag\n  if (state.questionsByTag.hasOwnProperty('questionsByTags') &&\n    state.questionsByTag.questionsByTags.hasOwnProperty(state.questionsByTag.currentTag)) {\n    showFilterTag = state.questionsByTag.questionsByTags[state.questionsByTag.currentTag].items.length > 0\n  }\n  return {\n    showFilterTag\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    filterQuestions: (searchString) => {\n      dispatch(filterQuestionsByString(searchString))\n    }\n  }\n}\n\n\nconst FilterTag = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FilterTagComponent)\n\nexport default FilterTag","import React from 'react'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport { Container } from 'react-bootstrap'\nimport SearchTag from './containers/SearchTag'\nimport Questions from './containers/Questions';\nimport FilterTag from './containers/FilterTag';\n\nfunction App() {\n  return (\n    <Container>\n      <h1 style={{marginTop: 20, marginBottom: 30}}>Stackoverflow Basic View</h1>\n      <SearchTag />\n      <FilterTag />\n      <Questions />\n    </Container>\n  );\n}\n\nexport default App;\n","import {\n  combineReducers\n} from 'redux'\nimport questionsByTag from './questions'\n\nconst rootReducer = combineReducers({\n  questionsByTag\n})\n\nexport default rootReducer","import {\n  GET_QUESTIONS_BY_TAG,\n  RECEIVE_QUESTIONS_BY_TAG,\n  ERROR_RECEIVING_QUESTIONS_BY_TAG,\n  FILTER_QUESTIONS_BY_STRING,\n} from '../../actions'\n\n\nexport default function questions(\n  state = {\n    currentTag: '',\n    filterBy: '',\n    isFetching: false,\n    hasError: false,\n    errorMessage: '',\n    questionsByTags: Object.assign({})\n  },\n  action\n) {\n  switch (action.type) {\n    case ERROR_RECEIVING_QUESTIONS_BY_TAG:\n      return Object.assign({}, state, {\n        hasError: true,\n        currentTag: action.tag,\n        filterBy: '',\n        errorMessage: action.errorMessage\n      })\n    case GET_QUESTIONS_BY_TAG:\n      return Object.assign({}, state, {\n        isFetching: true,\n        filterBy: '',\n        currentTag: action.tag,\n        hasError: false\n      })\n    case RECEIVE_QUESTIONS_BY_TAG:\n      return Object.assign({}, state, {\n        isFetching: false,\n        hasError: false,\n        filterBy: '',\n        currentTag: action.tag,\n        questionsByTags: Object.assign({}, state.questionsByTags, {\n          [action.tag]: action.questions\n        }),\n      })\n    case FILTER_QUESTIONS_BY_STRING:\n      return Object.assign({}, state, {\n        filterBy: action.searchString\n      })\n    default:\n      return state\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './App';\nimport configureStore from './store/store'\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// import { createLogger } from 'redux-logger'\nimport rootReducer from './reducers'\nimport {\n  composeWithDevTools\n} from 'redux-devtools-extension'\nimport {\n  applyMiddleware,\n  createStore\n} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\n// const loggerMiddleware = createLogger()\n\nexport default function configureStore(preloadedState) {\n  const middlewares = [\n    // loggerMiddleware,\n    thunkMiddleware\n  ]\n  const middlewareEnhancer = applyMiddleware(...middlewares)\n\n  const enhancers = [middlewareEnhancer]\n  const composedEnhancers = composeWithDevTools(...enhancers)\n\n  const store = createStore(rootReducer, preloadedState, composedEnhancers)\n\n  return store\n}"],"sourceRoot":""}